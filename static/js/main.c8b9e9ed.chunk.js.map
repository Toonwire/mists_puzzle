{"version":3,"sources":["assets/LeafEmpty.png","assets/LeafFull.png","assets/CircledLeafEmpty.png","assets/CircledLeafFull.png","assets/FlowerEmpty.png","assets/FlowerFull.png","assets/CircledFlowerEmpty.png","assets/CircledFlowerFull.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","symbolMap","LeafEmpty","LeafFull","CircledLeafEmpty","CircledLeafFull","FlowerEmpty","FlowerFull","CircledFlowerEmpty","CircledFlowerFull","validCombinations","k_combinations","set","k","i","j","combs","head","tailcombs","length","push","slice","concat","Object","keys","forEach","combGroup","combSet","map","comb","split","attrStr","Number","candidateIndex","candidates","attrIndex","attrCol","attrSum","reduce","sum","attrVal","findIndex","combination","data","img","uniqueIndex","Status","msg","useStyles","makeStyles","theme","margin","maxWidth","symbolContainer","display","width","height","minWidth","minHeight","borderRadius","cursor","score","color","App","classes","useState","randomCombinationSet","setRandomCombinationSet","setScore","show","setShow","status","setStatus","useEffect","Math","floor","random","timeout","setTimeout","clearTimeout","Box","flexDirection","p","style","backgroundColor","Grid","container","spacing","justify","symbol","index","item","key","className","bgcolor","onClick","handleClick","onMouseEnter","onMouseLeave","src","alt","hidden","alignItems","m","Alert","severity","Typography","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8b9e9ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LeafEmpty.a38170c5.png\";","module.exports = __webpack_public_path__ + \"static/media/LeafFull.e50c0522.png\";","module.exports = __webpack_public_path__ + \"static/media/CircledLeafEmpty.0656893d.png\";","module.exports = __webpack_public_path__ + \"static/media/CircledLeafFull.2d6045fb.png\";","module.exports = __webpack_public_path__ + \"static/media/FlowerEmpty.508aaf16.png\";","module.exports = __webpack_public_path__ + \"static/media/FlowerFull.1d5cf613.png\";","module.exports = __webpack_public_path__ + \"static/media/CircledFlowerEmpty.f37a309d.png\";","module.exports = __webpack_public_path__ + \"static/media/CircledFlowerFull.dfd139c0.png\";","import React, { useState, useEffect } from 'react';\n\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Alert from '@material-ui/lab/Alert';\nimport Typography from '@material-ui/core/Typography';\n\nimport LeafEmpty from './assets/LeafEmpty.png';\nimport LeafFull from './assets/LeafFull.png';\nimport CircledLeafEmpty from './assets/CircledLeafEmpty.png';\nimport CircledLeafFull from './assets/CircledLeafFull.png';\nimport FlowerEmpty from './assets/FlowerEmpty.png';\nimport FlowerFull from './assets/FlowerFull.png';\nimport CircledFlowerEmpty from './assets/CircledFlowerEmpty.png';\nimport CircledFlowerFull from './assets/CircledFlowerFull.png';\n\nconst symbolMap = {\n  // [flower?, full?, ring?]\n  \"0,0,0\": LeafEmpty,\n  \"0,1,0\": LeafFull,\n  \"0,0,1\": CircledLeafEmpty,\n  \"0,1,1\": CircledLeafFull,\n  \"1,0,0\": FlowerEmpty,\n  \"1,1,0\": FlowerFull,\n  \"1,0,1\": CircledFlowerEmpty,\n  \"1,1,1\": CircledFlowerFull,\n};\n\nfunction k_combinations(set, k) {\n  let i, j, combs, head, tailcombs;\n\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  // K-sized set has only one K-sized subset.\n  if (k === set.length) {\n    return [set];\n  }\n\n  // There is N 1-sized subsets in a N-sized set.\n  if (k === 1) {\n    combs = [];\n    for (let i = 0; i < set.length; i++) {\n      combs.push([set[i]]);\n    }\n    return combs;\n  }\n\n  combs = [];\n  for (i = 0; i < set.length - k + 1; i++) {\n    head = set.slice(i, i + 1);\n    tailcombs = k_combinations(set.slice(i + 1), k - 1);\n    for (j = 0; j < tailcombs.length; j++) {\n      combs.push(head.concat(tailcombs[j]));\n    }\n  }\n  return combs;\n}\n\nlet validCombinations = [];\nk_combinations(Object.keys(symbolMap), 4).forEach(combGroup => {\n  const combSet = combGroup.map(comb => comb.split(\",\").map(attrStr => Number(attrStr)));\n  let candidateIndex = -1;\n  let candidates = 0;\n  for (let attrIndex = 0; attrIndex < combSet[0].length; attrIndex++) {\n    const attrCol = combSet.map(comb => comb[attrIndex]);\n    const attrSum = attrCol.reduce((sum, attrVal) => sum + attrVal, 0);\n    if (attrSum === 1) {\n      // find the index that has 1 as attrVal\n      candidateIndex = attrCol.findIndex(attrVal => attrVal === 1);\n      candidates++;\n    } else if (attrSum === attrCol.length - 1) {\n      // find the index that has 0 as attrVal\n      candidateIndex = attrCol.findIndex(attrVal => attrVal === 0);\n      candidates++;\n    }\n  }\n\n  if (candidates === 1 && candidateIndex !== -1) {\n    validCombinations.push({\n      combination: combSet.map(comb => ({ data: comb, img: symbolMap[comb] })),\n      uniqueIndex: candidateIndex,\n    });\n  }\n});\n\nconst Status = {\n  CORRECT: {\n    msg: \"Correct!\",\n  },\n  WRONG: {\n    msg: \"Wrong symbol\",\n  },\n  DEFAULT: {\n    msg: \"Find the odd one out!\",\n  },\n}\n\nconst useStyles = makeStyles((theme) => ({\n  img: {\n    margin: \"auto\",\n    maxWidth: \"100%\",\n  },\n  symbolContainer: {\n    display: \"flex\",\n    width: 300,\n    height: 300,\n    minWidth: 300,\n    minHeight: 300,\n    borderRadius: \"50%\",\n    cursor: \"pointer\",\n  },\n  score: {\n    color: \"#dedede\",\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [randomCombinationSet, setRandomCombinationSet] = useState();\n  const [score, setScore] = useState(0);\n  const [show, setShow] = useState(-1);\n  const [status, setStatus] = useState(Status.DEFAULT);\n\n  useEffect(() => {\n    setRandomCombinationSet(validCombinations[Math.floor(Math.random() * validCombinations.length)]);\n  }, [score]);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setStatus(Status.DEFAULT);\n    }, 2000);\n\n    return () => clearTimeout(timeout);\n  }, [status]);\n\n  const handleClick = (index) => {\n    if (index === randomCombinationSet.uniqueIndex) {\n      setScore(score + 1);\n      setStatus(Status.CORRECT);\n    } else {\n      setScore(0);\n      setStatus(Status.WRONG);\n    }\n  }\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" p={4} style={{ backgroundColor: \"#1e1e1e\" }}>\n      <Grid container spacing={3} justify=\"center\">\n        {randomCombinationSet && randomCombinationSet.combination.map((symbol, index) => (\n          <Grid item key={index}>\n            <Box className={classes.symbolContainer}\n              bgcolor={show !== index ? \"#bbdefb\" : \"inherit\"}\n              onClick={() => handleClick(index)}\n              onMouseEnter={() => setShow(index)}\n              onMouseLeave={() => setShow(-1)}\n            >\n              <img src={symbol.img} alt=\"mists_symbol\" className={classes.img} hidden={show !== index} />\n            </Box>\n          </Grid>\n        ))}\n      </Grid>\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" width={400} m=\"40px auto\">\n        {status === Status.CORRECT && <Alert severity=\"success\">{Status.CORRECT.msg}</Alert>}\n        {status === Status.WRONG && <Alert severity=\"error\">{Status.WRONG.msg}</Alert>}\n        {status === Status.DEFAULT && <Alert severity=\"info\">{Status.DEFAULT.msg}</Alert>}\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" color=\"#f2f2f2\">\n        <Typography className={classes.score} variant=\"h4\">{`Score: ${score}`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}